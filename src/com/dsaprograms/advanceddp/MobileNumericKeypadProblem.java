package com.dsaprograms.advanceddp;
import java.util.Scanner;
/*
Letter Combinations of a Phone Number Dynamic Programming | Mobile Numeric Keypad Problem.
1. You are given a number N, which represents the count of buttons pressed on a mobile numeric keypad.
2. You can only press buttons that are up, left, right, down to the current button and the current button also.
3. You can not press bottom row corner buttons(* and #).
4. You have to find the count of different numbers that can be generated by pressing N number of buttons.
Sample Input
2
Sample Output
36
 */
public class MobileNumericKeypadProblem {
    public static void numericKeypad(int n){
        int [][] allowed ={
                {0,8},          // 0 : can be pressed after these numbers
                {1,2,4},        // 1
                {1,2,3,5},      // 2
                {3,2,6},        // 3
                {4,1,5,7},      // 4
                {5,2,4,6,8},    // 5
                {6,3,5,9},      // 6
                {7,4,8},        // 7
                {8,5,7,9,0},    // 8
                {9,6,8}         // 9
        };

        int [][] dp = new int[n+1][10];
        // when i=0 no button is pressed therefore its 0
        for(int i=1;i<=n;i++){
            for(int j=0;j<=9;j++){
                if(i==1){ // When we have chance to press the button only once.
                    dp[i][j] = 1;
                }
                else{
                    for(int keyCanBePressed: allowed[j]){
                        dp[i][j] += dp[i-1][keyCanBePressed];
                    }
                }
            }
        }
        int sum=0;
        for(int j=0;j<=9;j++){
            sum += dp[n][j];
        }
        System.out.println("Count of different numbers that can be generated by pressing N number of buttons: "+sum);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        numericKeypad(n);
    }
}
